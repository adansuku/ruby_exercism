c
process_results(input)
c
Hash.new { |hash, key| hash[key] = { matches_played: 0, wins: 0, draws: 0, losses: 0, points: 0 } }
input
c
Tournament.tally(input)
c
Tournament.tally(input)
c
Tournament.tally(input)
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
 Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
results.sort_by { |team, stats| [-stats[:p], team] }
results..sort_by { |team, stats| [-stats[:p], team] }
results.           .sort_by { |team, stats| [-stats[:p], team] } # Orden por puntos (desc) y nombre (asc)
results
c
results
c
  results.each do |name, stats|
        output += "#{name}             |  #{stats[:mp]} |  #{stats[:w]} |  #{stats[:d]} |  #{stats[:l]} |  #{stats[:p]}\n"
      end
results
output
results
c
resutls
c
results
c
results
c
results
c
cc
c
Tournament.tally(input)
expected
c
team1
results[team1]
c
results[team1]
results[team1][:p] += 3
results[team1]
resutls[team1]
team1
results["Allegoric Alaskans"]
resuts["Allegoric Alaskans"]
results[:team1]
team1
results
c
results
c
output
c
results
c
Tournament.tally(input)
expected
c
output
c
result
c
result
c
result
c
Tournament.tally(input)
input
Tournament.tally(input)
expected
c
expected == Tournament.tally(input)
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
c
Tournament.tally(input)
expected
expected ==Tournament.tally(input)
expected
    assert_equal expected, Tournament.tally(input)
c
Tournament.tally(input)
expected
c
Tournament.tally(input).strip
Tournament.tally(input)
c
output
output.strip
c
Tournament.tally(input)
expected
c
expected
Tournament.tally(input)
input
c
Tournament.tally(input)
c
output
c
Tournament.tally(input)
c
header
c
        header += "#{_name}                           | #{_stats[:mp]} |  #{_stats[:w]} |  #{_stats[:d]} |  #{_stats[:l]} |  #{_stats[:p]}\n"
c
        header += "#{_name}                           | #{_stats[:mp]} |  #{_stats[:w]} |  #{_stats[:d]} |  #{_stats[:l]} |  #{_stats[:p]}\n"
_stats
_name
results
c
output
      output = "Team                           | MP |  W |  D |  L |  P\n"
      sorted_teams = results.sort_by { |_name, stats| [-stats[:p], _name] }
c
results
c
results
c
results
c
results
c
results[team1][:w]c
results[team1][:w]
results[team1]
team1_mp = 0
      team2_mp = 0
result
results
c
team1
c
lines
c
lines
c
team1, team2, result = line.strip.split(";")
team1, team2, result = _line.strip.split(";")
line
c
team1, team2, result = _line.strip.split(";")
c
team1, team2, result = _line.strip.split(";")
team1, team2, result = line.strip.split(";")
_line
c
input
c
Tournament.tally(input)
c
Tournament.tally(input)
c
    results = { mp: 0, w: 0, d: 0, l: 0, p: 0 }
results
    results = Hash.new { |hash, key| hash[key] = { mp: 0, w: 0, d: 0, l: 0, p: 0 } }
    results = { mp: 0, w: 0, d: 0, l: 0, p: 0 }
    results = Hash.new { |hash, key| hash[key] = { mp: 0, w: 0, d: 0, l: 0, p: 0 } }
line.to_array
line.to_a
line
c
line
c
line.split(';')
line.split(";")
line
c
input.each_line.map do |line|
      team1, team2, outcome = line.split(';')
    end
input.split(input.each_line.map do |line|
      team1, team2, outcome = line.split(';')
    end)
input.split(";")
input
HEADER
self.header
self.HEADER
HEADER
HEADer
c
Tournament.tally(input)
c
Tournament.tally(input)
c
Tournament.tally(input)
c
Tournament.tally(input)
input
Tournament.tally(input)
c
Tournament.tally(input)
c
expected
Tournament.tally(input)
c
Tournament.tally(input)
c
input
imput
Tournament.tally(input)
c
inpu
input
Tournament.tally(input)
